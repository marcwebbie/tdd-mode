#+TITLE: TDD Mode for Python in Emacs
#+OPTIONS: toc:nil
#+HTML_HEAD: <style>h2 { text-align: center; } .shields { text-align: center; margin-bottom: 20px; } .center { text-align: center; } </style>

#+BEGIN_HTML
<div class="shields">
<a href="https://github.com/marcwebbie/tdd-mode">
<img src="https://img.shields.io/github/stars/marcwebbie/tdd-mode?style=social" alt="GitHub stars">
</a>
<a href="https://github.com/marcwebbie/tdd-mode">
<img alt="GitHub forks" src="https://img.shields.io/github/forks/marcwebbie/tdd-mode">
</a>
<a href="https://github.com/marcwebbie/tdd-mode/issues">
<img src="https://img.shields.io/github/issues/marcwebbie/tdd-mode?color=blue&label=Issues" alt="GitHub issues">
</a>
<a href="https://github.com/marcwebbie/tdd-mode/actions">
<img src="https://img.shields.io/github/contributors/marcwebbie/tdd-mode" alt="Contributors">
</a>
<a href="https://www.gnu.org/licenses/gpl-3.0.en.html">
<img src="https://img.shields.io/badge/License-GPLv3-blue.svg" alt="GPLv3 License">
</a>
</div>
#+END_HTML

* Overview
=tdd-mode= is a powerful Emacs minor mode tailored for Python developers practicing test-driven development (TDD). It simplifies the TDD workflow with features like test execution at point, mode-line feedback, and notifications.

- *GitHub Repository*: [[https://github.com/marcwebbie/tdd-mode][tdd-mode]]

* Features
- *Run Tests at Point*: Execute tests for the current function or class.
- *Error Navigation*: Navigate errors using built-in `compilation-mode` commands (like `next-error` and `previous-error`), which `tdd-mode` utilizes for test output.
- *Run Relevant Tests*: Automatically detect changes in Git and run corresponding Python test files.
- *Notifications*: Alerts on test pass/fail, with optional mode-line blinking and integration with the `alert` package.
- *Auto Test on Save*: Automatically re-run the last test after saving a file.
- *Breakpoint Insertion*: Quickly insert =ipdb= or =pudb= breakpoints.
- *Customizable Keymap*: Easily redefine keybindings for TDD commands.
- *Copy Diff and Output*: Copy the Git diff and the test output to the clipboard.

* Quickstart Tutorial
** Step 1: Install TDD Mode
Using =straight.el= or =use-package=, add the following configuration to your Emacs setup:

#+BEGIN_SRC emacs-lisp
(use-package tdd-mode
  :straight (tdd-mode :type git :host github :repo "marcwebbie/tdd-mode")
  :hook (python-mode . tdd-mode)
  :bind-keymap ("C-c t" . tdd-mode-command-map)
  :config
  (setq tdd-mode-test-runner 'pytest
        tdd-mode-notify-on-pass t
        tdd-mode-notify-on-fail t
        tdd-mode-auto-run-on-save t
        tdd-mode-scroll-output t
        tdd-mode-buffer-popup t)) ; Added tdd-mode-buffer-popup for clarity
#+END_SRC

** Step 2: Activate TDD Mode
Open any Python file in Emacs. =tdd-mode= will activate automatically if added to your =python-mode= hook.

** Step 3: Run Your First Test
Place your cursor on a function or class and press:
- =C-c t t=: Run the test at the current point.

The output will appear in the =*tdd-output*= buffer.

** Step 4: Explore Other Commands
- Run all tests in the project: =C-c t a=
- Re-run the last test: =C-c t l=
- Copy the last test command: =C-c t p=
- Insert an =ipdb= breakpoint: =C-c t b=
- Insert a =pudb= breakpoint: =C-c t B=
- Copy diff and test output: =C-c t C=

** Step 5: Navigate Test Output
Use =n= and =p= (or =M-g n= and =M-g p= for global `next-error` and `previous-error` commands) in the =*tdd-output*= buffer to navigate to the next or previous error.

* Installation
You can install =tdd-mode= directly by cloning the repository or using a package manager such as =straight.el= or =use-package=.

** Using use-package with straight.el
#+BEGIN_SRC emacs-lisp
(use-package tdd-mode
  :straight (tdd-mode :type git :host github :repo "marcwebbie/tdd-mode")
  :hook (python-mode . tdd-mode)
  :bind-keymap ("C-c t" . tdd-mode-command-map)
  :config
  (setq tdd-mode-test-runner 'pytest
        tdd-mode-notify-on-pass t
        tdd-mode-notify-on-fail t
        tdd-mode-auto-run-on-save t
        tdd-mode-scroll-output t
        tdd-mode-buffer-popup t)) ; Added tdd-mode-buffer-popup for clarity
#+END_SRC

** Using use-package without straight.el
#+BEGIN_SRC emacs-lisp
(use-package tdd-mode
  :load-path "~/path/to/tdd-mode"
  :hook (python-mode . tdd-mode)
  :bind-keymap ("C-c t" . tdd-mode-command-map)
  :config
  (setq tdd-mode-test-runner 'pytest
        tdd-mode-notify-on-pass t
        tdd-mode-notify-on-fail t
        tdd-mode-auto-run-on-save t
        tdd-mode-scroll-output t
        tdd-mode-buffer-popup t)) ; Added tdd-mode-buffer-popup for clarity
#+END_SRC

* Configuration
=tdd-mode= comes with several customizable options:

| Option                     | Description                                        | Default Value |
|----------------------------+----------------------------------------------------+---------------|
| =tdd-mode-test-runner=     | Test runner to use (=pytest=, =nosetests=, =django=). | =pytest=      |
| =tdd-mode-notify-on-pass=  | Enable notifications when tests pass.              | =t=           |
| =tdd-mode-notify-on-fail=  | Enable notifications when tests fail.              | =t=           |
| =tdd-mode-auto-run-on-save=| Auto-run the last test on save for test-related files. | =t=           |
| =tdd-mode-scroll-output=   | Auto-scroll the =*tdd-output*= buffer to follow output. | =t=        |
| =tdd-mode-buffer-popup=    | If non-nil, displays the =*tdd-output*= buffer after each test run. | =t= |
| =tdd-mode-verbose=         | Toggle verbose debug output for TDD Mode.          | =nil=         |
| =tdd-mode-blink-enabled=   | If non-nil, enables mode-line blinking on test failures and success. | =t= |
| =tdd-mode-blink-fail-color=| Color for the mode-line when a test fails.      | ="#F44336"=   |
| =tdd-mode-blink-pass-color=| Color for the mode-line when a test passes.      | ="#4CAF50"=   |
| =tdd-mode-blink-steps=     | Number of steps for the mode-line fade effect.     | =20=          |
| =tdd-mode-blink-interval=  | Interval in seconds between each fade step.        | =0.2=         |

* Keybindings
Here are the default keybindings for =tdd-mode=:

| Keybinding | Command                            | Description                                |
|------------+------------------------------------+--------------------------------------------|
| =C-c t t=  | =tdd-mode-run-test-at-point=       | Run the test at the current point.         |
| =C-c t f=  | =tdd-mode-run-file-tests=          | Run all tests in the current file.         |
| =C-c t a=  | =tdd-mode-run-all-tests=           | Run all tests in the project.              |
| =C-c t r=  | =tdd-mode-run-relevant-tests=      | Run tests based on changes in Git.         |
| =C-c t l=  | =tdd-mode-run-last-test=           | Re-run the last executed test command.     |
| =C-c t c=  | =tdd-mode-copy-output-to-clipboard=| Copy the test output to the clipboard.     |
| =C-c t b=  | =tdd-mode-insert-ipdb-breakpoint=  | Insert an =ipdb= breakpoint.               |
| =C-c t B=  | =tdd-mode-insert-pudb-breakpoint=  | Insert a =pudb= breakpoint.                |
| =C-c t C=  | =tdd-mode-copy-diff-and-output=    | Copy the git diff and test output to clipboard. |

* Inspirations
=tdd-mode= draws inspiration from several excellent Emacs packages:

- [[https://github.com/Malabarba/beacon][beacon.el]]: Smooth visual feedback.
- [[https://github.com/wbolster/emacs-pytest][pytest.el]]: Pytest utilities for Emacs.
- [[https://github.com/AdrieanKhisbe/auto-virtualenv][auto-virtualenv.el]]: Automatic Python environment handling.

* License

GNU GENERAL PUBLIC LICENSE
Version 3, 29 June 2007

Copyright (C) 2024 Marcwebbie <marcwebbie@gmail.com>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
