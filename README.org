#+TITLE: TDD Mode for Python in Emacs
#+OPTIONS: toc:nil
#+HTML_HEAD: <style>h2 { text-align: center; } .shields { text-align: center; margin-bottom: 20px; } .center { text-align: center; } </style>

#+BEGIN_HTML
<h2 align="center">
    TDD Mode: Modern Test-Driven Development for Python in Emacs
</h2>

<div class="shields">
    <a href="https://github.com/marcwebbie/tdd-mode">
        <img src="https://img.shields.io/github/stars/marcwebbie/tdd-mode?style=social" alt="GitHub stars">
    </a>
    <a href="https://github.com/marcwebbie/tdd-mode/issues">
        <img src="https://img.shields.io/github/issues/marcwebbie/tdd-mode?color=blue&label=Issues" alt="GitHub issues">
    </a>
    <a href="https://github.com/marcwebbie/tdd-mode/actions">
        <img src="https://img.shields.io/github/actions/workflow/status/marcwebbie/tdd-mode/tests.yml?label=Build&color=brightgreen" alt="Build status">
    </a>
    <a href="https://opensource.org/licenses/MIT">
        <img src="https://img.shields.io/badge/License-MIT-blue.svg" alt="License">
    </a>
</div>
#+END_HTML

* Overview
`tdd-mode` is a powerful Emacs minor mode tailored for Python developers practicing test-driven development (TDD). It simplifies the TDD workflow with features like test execution at point, error navigation, mode-line feedback, and notifications.

- **GitHub Repository**: [[https://github.com/marcwebbie/tdd-mode][tdd-mode]]

* Features
- **Run Tests at Point**: Execute tests for the current function or class.
- **Error Navigation**: Skip external files and jump directly to errors in your project.
- **Run Relevant Tests**: Automatically detect changes in Git and run corresponding tests.
- **Notifications**: Alerts on test pass/fail, with optional mode-line blinking.
- **Auto Test on Save**: Automatically re-run the last test after saving a file.
- **Breakpoint Insertion**: Quickly insert `ipdb` or `pudb` breakpoints.
- **Customizable Keymap**: Easily redefine keybindings for TDD commands.

* Quickstart Tutorial
** Step 1: Install TDD Mode
Using `straight.el` or `use-package`, add the following configuration to your Emacs setup:

#+BEGIN_SRC emacs-lisp
(use-package tdd-mode
  :straight (tdd-mode :type git :host github :repo "marcwebbie/tdd-mode")
  :hook (python-mode . tdd-mode)
  :bind-keymap ("C-c t" . tdd-mode-command-map)
  :config
  (setq tdd-mode-test-runner 'pytest
        tdd-mode-notify-on-pass t
        tdd-mode-notify-on-fail t
        tdd-mode-auto-run-on-save t
        tdd-mode-scroll-output t))
#+END_SRC

** Step 2: Activate TDD Mode
Open any Python file in Emacs. `tdd-mode` will activate automatically if added to your `python-mode` hook.

** Step 3: Run Your First Test
Place your cursor on a function or class and press:
- `C-c t t`: Run the test at the current point.

The output will appear in the `*tdd-output*` buffer.

** Step 4: Explore Other Commands
- Run all tests in the project: `C-c t a`
- Re-run the last test: `C-c t l`
- Copy the last test command: `C-c t p`
- Insert an `ipdb` breakpoint: `C-c t b`

** Step 5: Navigate Test Output
Use `n` and `p` in the `*tdd-output*` buffer to navigate to the next or previous error, skipping non-project files.

* Installation
You can install `tdd-mode` directly by cloning the repository or using a package manager such as `straight.el` or `use-package`.

** Using use-package with straight.el
#+BEGIN_SRC emacs-lisp
(use-package tdd-mode
  :straight (tdd-mode :type git :host github :repo "marcwebbie/tdd-mode")
  :hook (python-mode . tdd-mode)
  :bind-keymap ("C-c t" . tdd-mode-command-map)
  :config
  (setq tdd-mode-test-runner 'pytest
        tdd-mode-notify-on-pass t
        tdd-mode-notify-on-fail t
        tdd-mode-auto-run-on-save t
        tdd-mode-scroll-output t))
#+END_SRC

** Using use-package without straight.el
#+BEGIN_SRC emacs-lisp
(use-package tdd-mode
  :load-path "~/path/to/tdd-mode"
  :hook (python-mode . tdd-mode)
  :bind-keymap ("C-c t" . tdd-mode-command-map)
  :config
  (setq tdd-mode-test-runner 'pytest
        tdd-mode-notify-on-pass t
        tdd-mode-notify-on-fail t
        tdd-mode-auto-run-on-save t
        tdd-mode-scroll-output t))
#+END_SRC

* Configuration
`tdd-mode` comes with several customizable options:

| Option                      | Description                                            | Default Value     |
|-----------------------------+--------------------------------------------------------+-------------------|
| `tdd-mode-test-runner`      | Test runner to use (`pytest`, `nosetests`, `django`).  | `pytest`          |
| `tdd-mode-notify-on-pass`   | Enable notifications when tests pass.                  | `t`               |
| `tdd-mode-notify-on-fail`   | Enable notifications when tests fail.                  | `t`               |
| `tdd-mode-auto-run-on-save` | Auto-run the last test on save for test-related files. | `t`               |
| `tdd-mode-scroll-output`    | Auto-scroll the `*tdd-output*` buffer to follow output.| `t`               |

* Keybindings
Here are the default keybindings for `tdd-mode`:

| Keybinding  | Command                                      | Description                                     |
|-------------+---------------------------------------------+------------------------------------------------|
| ~C-c t t~   | `tdd-mode-run-test-at-point`                | Run the test at the current point.             |
| ~C-c t f~   | `tdd-mode-run-file-tests`                   | Run all tests in the current file.             |
| ~C-c t a~   | `tdd-mode-run-all-tests`                    | Run all tests in the project.                  |
| ~C-c t r~   | `tdd-mode-run-relevant-tests`               | Run tests based on changes in Git.             |
| ~C-c t l~   | `tdd-mode-run-last-test`                    | Re-run the last executed test command.         |
| ~C-c t c~   | `tdd-mode-copy-output-to-clipboard`         | Copy the test output to the clipboard.         |
| ~C-c t b~   | `tdd-mode-insert-ipdb-breakpoint`           | Insert an `ipdb` breakpoint.                   |
| ~C-c t B~   | `tdd-mode-insert-pudb-breakpoint`           | Insert a `pudb` breakpoint.                    |

* Inspirations
`tdd-mode` draws inspiration from several excellent Emacs packages:

- [[https://github.com/Malabarba/beacon][beacon.el]]: Smooth visual feedback.
- [[https://github.com/wbolster/emacs-pytest][pytest.el]]: Pytest utilities for Emacs.
- [[https://github.com/AdrieanKhisbe/auto-virtualenv][auto-virtualenv.el]]: Automatic Python environment handling.

* License

MIT License

Copyright Â© 2024 Marcwebbie

See the full license in the [[https://opensource.org/licenses/MIT][LICENSE file]].

---
